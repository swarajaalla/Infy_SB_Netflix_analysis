# -*- coding: utf-8 -*-
"""Netflix_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GTKOP_IN679GQONOqauHLbQivC0PHSSl
"""

# netflix_analysis.py
import pandas as pd
from sklearn.preprocessing import LabelEncoder, MultiLabelBinarizer

# Step 1: Load Dataset
df = pd.read_csv("/content/NETFLIX_INF.csv")
print("✅ Dataset loaded successfully.")

# Step 2: Cleaning
# Drop duplicates
df.drop_duplicates(inplace=True)

# Handle missing values
df['country'] = df['country'].fillna("Unknown")
df['director'] = df['director'].fillna("Not Available")
df['cast'] = df['cast'].fillna("Not Available")
df['rating'] = df['rating'].fillna("Not Rated")
df['duration'] = df['duration'].fillna("0")

# Convert date_added to datetime
df['date_added'] = pd.to_datetime(df['date_added'], errors='coerce')

# Remove extra spaces
for col in ['type', 'rating', 'country', 'director', 'listed_in']:
    if col in df.columns:
        df[col] = df[col].astype(str).str.strip()

# Remove special characters from country
df['country'] = df['country'].str.replace(r'[^a-zA-Z ,]', '', regex=True)

# Drop rows without title
df = df.dropna(subset=['title'])

print("✅ Data cleaned successfully.")

# Step 3: Insights (EDA)
print("\n--- Netflix Dataset Insights ---")

# Total records
print("Total records:", len(df))

# Movies vs TV Shows
print("\nMovies vs TV Shows:")
print(df['type'].value_counts())

# Top 10 countries
print("\nTop 10 Countries with Most Content:")
print(df['country'].value_counts().head(10))

# Top 10 genres
print("\nTop 10 Genres:")
genres = df['listed_in'].str.split(', ', expand=True).stack()
print(genres.value_counts().head(10))

# Top 5 directors
print("\nTop 5 Directors:")
print(df['director'].value_counts().head(5))

# Content added over years
print("\nContent Added Over the Years:")
df['year_added'] = df['date_added'].dt.year
print(df['year_added'].value_counts().sort_index())

# Top 10 actors
print("\nTop 10 Actors on Netflix:")
actors = df['cast'].dropna().str.split(', ', expand=True).stack()
print(actors.value_counts().head(10))

# Distribution of Movie durations
print("\nDistribution of Movie Durations:")
movies = df[df['type'] == 'Movie']
print(movies['duration'].value_counts().head(10))

# Step 4: Encoding
# Label Encoding for rating
label_encoder = LabelEncoder()
df['rating_encoded'] = label_encoder.fit_transform(df['rating'])
print("\n✅ 'rating' column label encoded.")

# Frequency Encoding for country
country_freq = df['country'].value_counts().to_dict()
df['country_encoded'] = df['country'].map(country_freq)
print("✅ Frequency encoding applied to 'country'.")

# Multi-label One-Hot Encoding for Genres
df['genres_list'] = df['listed_in'].apply(lambda x: [g.strip() for g in str(x).split(',')])
mlb = MultiLabelBinarizer()
genres_encoded = pd.DataFrame(
    mlb.fit_transform(df['genres_list']),
    columns=mlb.classes_,
    index=df.index
)
df = pd.concat([df, genres_encoded], axis=1)
print("✅ One-hot encoding applied to 'genres'.")

# Frequency Encoding for Primary Genre
df['primary_genre'] = df['listed_in'].apply(lambda x: str(x).split(',')[0].strip())
genre_freq = df['primary_genre'].value_counts().to_dict()
df['genre_encoded'] = df['primary_genre'].map(genre_freq)
print("✅ Frequency encoding applied to primary genre.")

# Step 5: Save Outputs
df.to_csv("NETFLIX_INF_CLEANED.csv", index=False)
print("✅ Final cleaned + encoded dataset saved as 'NETFLIX_INF_CLEANED.csv'.")